@using Microsoft.JSInterop
@using Blazor.CkEditor5.Models
@inject IJSRuntime Js
@implements IAsyncDisposable
<div>
    <textarea @ref="EditorElement">
        @Content
    </textarea>
</div>


@code {

    private ElementReference EditorElement { get; set; }
    private IJSObjectReference JsEditorInstance { get; set; }

    public bool IsInitialized { get; set; }

    private string _content;

    [Parameter]
    public string Content
    {
        get => _content;
        set
        {
            if (_content == value)
                return;
            _content = value;
            if (IsInitialized)
                SetData(value);

        }
    }

    [Parameter]
    public EventCallback<string> ContentChanged { get; set; }

    [Parameter]
    public CkEditorOptions Options { get; set; } = CkEditorOptions.Default;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;
        JsEditorInstance = await Js.InvokeAsync<IJSObjectReference>("ClassicEditor.create", EditorElement, Options, DotNetObjectReference.Create(this));
        IsInitialized = true;
    }

    [JSInvokable]
    public async Task EditorContentChanged(string data)
    {
        _content = data;
        if (ContentChanged.HasDelegate)
            await ContentChanged.InvokeAsync(data);
        StateHasChanged();
    }

    public async Task SetData(string content)
    {
        await JsEditorInstance.InvokeVoidAsync("data.set", content);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await JsEditorInstance.InvokeVoidAsync("destroy");
        GC.SuppressFinalize(this);
    }
}
